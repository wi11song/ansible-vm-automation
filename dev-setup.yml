---
- name: Configure Ubuntu 24.04 Development VM
  hosts: dev_vm
  become: yes
  vars:
    # Define the Conda environment name
    conda_env_name: "datasci"
    # Define the Python version for the Conda environment
    conda_python_version: "3.10"

  handlers:
    - name: Restart sshd
      ansible.builtin.service:
        name: sshd
        state: restarted

  tasks:
    - name: Update apt cache and install base dependencies
      ansible.builtin.apt:
        name:
          - git
          - curl
          - gpg
          - ca-certificates
        update_cache: yes
        state: present

    - name: Create directory for apt keyrings
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    # --- Docker ---
    - name: Download Docker GPG key (ASCII)
      ansible.builtin.get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /tmp/docker.asc
        mode: '0644'

    - name: Dearmor Docker GPG key
      ansible.builtin.command:
        cmd: gpg --dearmor -o /etc/apt/keyrings/docker.gpg /tmp/docker.asc
        creates: /etc/apt/keyrings/docker.gpg

    - name: Add Docker repository
      ansible.builtin.apt_repository:
        repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable"
        filename: docker
        state: present
        update_cache: yes

    - name: Install Docker packages
      ansible.builtin.apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present

    - name: Get current user info
      become: no
      ansible.builtin.command: whoami
      register: current_user
      changed_when: false

    - name: Add remote user to the 'docker' group
      ansible.builtin.user:
        name: "{{ current_user.stdout }}"
        groups: "docker"
        append: yes

    # --- Python (Miniconda) & Data Science Env ---
    # These tasks run as the regular user, not root
    - name: Download Miniconda installer
      become: no
      ansible.builtin.get_url:
        url: https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
        dest: "/tmp/miniconda.sh"
        mode: '0755'
      tags: ['conda']

    - name: Run Miniconda installer
      become: no
      ansible.builtin.shell:
        cmd: bash /tmp/miniconda.sh -b -p "$HOME/miniconda3"
        creates: "$HOME/miniconda3/bin/conda"
        executable: /bin/bash
      vars:
        ansible_become: no
      tags: ['conda']

    - name: Accept conda Terms of Service for main channel
      become: no
      ansible.builtin.shell:
        cmd: '$HOME/miniconda3/bin/conda tos accept --override-channels --channel https://repo.anaconda.com/pkgs/main'
        executable: /bin/bash
      vars:
        ansible_become: no
      tags: ['conda']

    - name: Accept conda Terms of Service for r channel
      become: no
      ansible.builtin.shell:
        cmd: '$HOME/miniconda3/bin/conda tos accept --override-channels --channel https://repo.anaconda.com/pkgs/r'
        executable: /bin/bash
      vars:
        ansible_become: no
      tags: ['conda']

    - name: Create Conda data science environment
      become: no
      ansible.builtin.shell:
        cmd: >
          "$HOME/miniconda3/bin/conda" create -n {{ conda_env_name }}
          python={{ conda_python_version }}
          pandas scikit-learn matplotlib jupyter
          --yes
        creates: "$HOME/miniconda3/envs/{{ conda_env_name }}/bin/python"
        executable: /bin/bash
      vars:
        ansible_become: no
      tags: ['conda']

    - name: Ensure Conda environment activation in .bashrc
      become: no
      ansible.builtin.lineinfile:
        path: "$HOME/.bashrc"
        line: 'source "$HOME/miniconda3/etc/profile.d/conda.sh" && conda activate {{ conda_env_name }}'
        create: yes
        state: present
      vars:
        ansible_become: no
      tags: ['conda']